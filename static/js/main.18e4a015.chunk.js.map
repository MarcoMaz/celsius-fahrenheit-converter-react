{"version":3,"sources":["components/Celsius.js","components/Fahrenheit.js","App.js","serviceWorker.js","index.js"],"names":["Celsius","_useContext","useContext","Temperature","cels","toF","react_default","a","createElement","id","type","value","onChange","Fahrenheit","fahr","toC","createContext","GradConverter","_useState","useState","_useState2","Object","slicedToArray","grad","updateGrad","Provider","e","target","toFixed","components_Celsius","components_Fahrenheit","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAgBeA,SAbC,WAAM,IAAAC,EACDC,qBAAWC,GAAxBC,EADcH,EACdG,KAAMC,EADQJ,EACRI,IACb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACPH,EAAAC,EAAAC,cAAA,qBACMF,EAAAC,EAAAC,cAAA,SAAQE,KAAO,SACVC,MAAUP,EACVQ,SAAaP,OCMZQ,EAbI,WAAM,IAAAZ,EACJC,qBAAWC,GAAxBW,EADiBb,EACjBa,KAAMC,EADWd,EACXc,IACb,OACCT,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cACPH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAO,SACHC,MAAUG,EACVF,SAAaG,MCLdZ,EAAca,0BA6BZC,MA3Bf,WAAwB,IAAAC,EACOC,mBAAS,CACpCf,KAAM,EACNU,KAAM,IAHcM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACRI,EADQJ,EAAA,GAgBtB,OACEd,EAAAC,EAAAC,cAACL,EAAYsB,SAAb,CAAsBd,MAAO,CAACP,KAAMmB,EAAKnB,KAAMU,KAAMS,EAAKT,KAAMT,IAXtD,SAAAqB,GAAC,OAAIF,EAAW,CAC1BpB,KAAMsB,EAAEC,OAAOhB,MACfG,MAAyB,EAAjBY,EAAEC,OAAOhB,MAAY,EAAK,IAAIiB,QAAQ,MASuBb,IAN3D,SAAAW,GAAC,OAAIF,EAAW,CAC1BpB,MAA+B,GAAvBsB,EAAEC,OAAOhB,MAAQ,IAAU,GAAGiB,QAAQ,GAC9Cd,KAAMY,EAAEC,OAAOhB,WAKbL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,SChBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.18e4a015.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { Temperature } from '../App'\n\nconst Celsius = () => {\n\tconst {cels, toF} = useContext(Temperature)\n\treturn (\n\t\t<div id=\"celsius\">\n\t\t\t<h2>Celsius</h2>\n\t        <input \ttype = \"number\"\n\t            \tvalue = { cels }\n\t            \tonChange = { toF }>\n\t        </input>\n\t    </div> \n\t    )\n\t}\n\nexport default Celsius;","import React, { useContext } from 'react';\nimport { Temperature } from '../App'\n\nconst Fahrenheit = () => {\n\tconst {fahr, toC} = useContext(Temperature)\n\treturn (\n\t\t<div id=\"fahrenheit\">\n\t\t\t<h2>Fahrenheit</h2>\n\t\t\t<input\ttype = \"number\" \n            \t\tvalue = { fahr } \n           \t\t\tonChange = { toC }>\n           \t</input>\n        </div>\n\t    )\n\t}\n\nexport default Fahrenheit;","import React, { useState, createContext } from 'react';\nimport './App.scss';\nimport Celsius from './components/Celsius'\nimport Fahrenheit from './components/Fahrenheit'\n\nexport const Temperature = createContext()\n\nfunction GradConverter(){\n  const [ grad, updateGrad ] = useState({\n    cels: 0,\n    fahr: 0\n    })\n  \n  const toF = e => updateGrad({\n    cels: e.target.value,\n    fahr: ((e.target.value * 9 / 5) + 32).toFixed(2)\n    })\n  \n  const toC = e => updateGrad({\n    cels: ((e.target.value - 32) * 5 / 9).toFixed(2),\n    fahr: e.target.value\n  })\n  \n  return(\n    <Temperature.Provider value={{cels: grad.cels, fahr: grad.fahr, toF, toC}}>\n      <div id=\"container\">\n        <h1>Celsius/Fahrenheit Converter</h1>\n        <Celsius/>\n        <Fahrenheit/>\n      </div>\n    </Temperature.Provider>\n    )\n}\n\nexport default GradConverter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}